import Telegraf from "telegraf";
import { createUser } from "./database/database.js";
import userStore from "./store/userStore.js";
import { createClient } from "mystat-api";

const Scenes = Telegraf.Scenes;
const deunionize = Telegraf.deunionize;

const loginScene = new Scenes.WizardScene<Telegraf.Scenes.WizardContext>(
  "login",
  async (ctx) => {
    await ctx.reply("üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ª–æ–≥–∏–Ω –æ—Ç mystat");
    return ctx.wizard.next();
  },
  async (ctx) => {
    const username = deunionize(ctx.message)?.text;

    if (!username) {
      return await ctx.reply("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º");
    }

    (ctx.session as any).username = username;

    ctx.deleteMessage(ctx.message?.message_id); // Deleting login so it won't be in chat history
    await ctx.reply("üîë –¢–µ–ø–µ—Ä—å –æ–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –ø–∞—Ä–æ–ª—å –æ—Ç mystat");

    return ctx.wizard.next();
  },
  async (ctx) => {
    const password = deunionize(ctx.message)?.text;

    if (!password) {
      return await ctx.reply("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–º");
    }

    (ctx.session as any).password = password;

    ctx.deleteMessage(ctx.message?.message_id); // Deleting password so it won't be in chat history
    await ctx.reply("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏");

    const loginData = {
      username: (ctx as any).session.username,
      password: (ctx as any).session.password,
    };

    try {
      const apiClient = await createClient({
        loginData,
        language: "ru",
        cache: "force-cache",
      });

      const chatId = ctx.chat?.id;
      const userId = ctx.from?.id;

      if (!chatId || !userId) {
        await ctx.reply("üö´ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.");
        return await ctx.scene.leave();
      }

      await ctx.reply("üîì –í—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω");
      await ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é");
      await createUser({
        username: loginData.username,
        password: loginData.password,
        chatId,
      });
      userStore.set(chatId, apiClient);
    } catch (err) {
      await ctx.reply(
        "üîí –ü—Ä–∏ –≤—Ö–æ–¥–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å."
      );
    }

    return await ctx.scene.leave();
  }
);

export default {
  login: loginScene,
};
